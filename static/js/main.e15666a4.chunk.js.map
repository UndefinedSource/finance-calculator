{"version":3,"sources":["components/shared.ts","components/Nav.tsx","core/utils.ts","components/depositPages/Deposit.tsx","core/reactState.ts","core/calculator/deposit.ts","components/charts/shared.ts","components/charts/DepositChart.tsx","components/tables/InstallmentSavingInterestTable.tsx","components/depositPages/shared.tsx","components/shared/TermSelection.tsx","components/depositPages/WithDepositResult.tsx","components/shared/ControlBtnSection.tsx","components/depositPages/InstallmentSaving.tsx","components/tables/FixedDepositInterestTable.tsx","components/depositPages/FixedDeposit.tsx","core/calculator/loan.ts","components/tables/LoanTable.tsx","components/loanPages/Loan.tsx","components/stockPage/Dividend.tsx","components/stockPage/DividendSection.tsx","components/discountPages/Discount.tsx","components/tables/CompoundAssetTable.tsx","components/charts/CompoundAssetChart.tsx","components/assetPages/CompoundAsset.tsx","core/calculator/discount.ts","components/discountPages/ItemDiscount.tsx","components/discountPages/ItemDiscountComparsion.tsx","components/Home.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["linkButtonData","className","link","value","Nav","href","map","data","i","ToggleButton","type","id","htmlFor","SavingType","Num","addCommas","num","toLocaleString","parseFloatWithPrecision","decimalPlaces","parseFloat","toFixed","Rate","termInMonth","interestRate","principal","actualInterest","termInYear","rateOfReturn","getRateOfReturn","actualRate","rate","Period","year","Math","floor","month","end","Array","from","length","v","k","toString","String","string","replaceAll","test","State","changePropertyValueToZero","e","setFunction","prevForm","target","name","changeProperty","changeIntProperty","parseInt","this","changeFloatProperty","changeNumWithCommasProperty","includes","valueWithoutCommas","Deposit","interest","taxRate","taxOnInterest","round","term","interests","interestRateInDecimal","prevPrincipalWithInterest","currentPrincipalWithInterest","push","tax","getTaxOnInterest","getCompoundInterestsBeforeTax","monthlyRate","FixedDeposit","interestBeforeTax","principalWithCompoundInterestBeforeTax","pow","yearlyInterestBeforeTax","getInterestBeforeTax","annualRate","InstallmentSaving","monthlySaving","remainingMonth","getPrincipalWithInterestFromMonthlyCompoundSaving","INIT_LINE_CHART_STATE","labels","datasets","label","borderColor","backgroundColor","CHART_COLOR","LINE_CHART_SETTING","plugins","legend","display","font","size","InstallmentSavingInterestChart","props","useState","setData","isTermInMonth","useEffect","options","responsive","scales","x","title","text","y","FixedDepositInterestChart","taxRateInDecimal","hasTaxOnCompoundInterest","interestsAfterTax","interestAfterTax","isMonthlyCompoundInterest","InstallmentSavingInterestTable","tableData","currentDeposit","totalInterest","displayInterestData","TAX_TYPE","DepositResult","totalAmount","actualInterestRate","TaxSelection","setTaxRate","checked","readOnly","onClick","TermSelection","setIsTermInMonth","WithDepositResult","WrappedComponent","INIT_STATE","setResultState","updatedState","setState","prevState","resetResultState","state","resultState","React","Component","ControlBtnSection","calculate","resetStates","InstallmentSavingSection","INIT_INPUT_STATE","input","setInput","handleSetResult","onChange","val","getMonthlyCompoundInterestBeforeTax","getMonthlyCompoundInterestsBeforeTax","calculateMonthlyCompoundInstallmentSaving","getInterestsBeforeTax","calculateInstallmentSaving","FixedDepositInterestTable","isYearlyCompoundSaving","prevTotalAmount","forEach","currentTerm","FixedDepositSection","isCompoundSaving","setIsMonthlyCompoundInterest","setStandardSavingResult","setCompoundSavingResult","calculateMonthlyCompoundSaving","getYearlyCompoundInterestBeforeTax","getYearlyCompoundInterestsBeforeTax","calculateYearlyCompoundSaving","getInterestWithMonthlyTermBeforeTax","calculateWithMonthlyTerm","getInterestWithYearlyTermBeforeTax","calculateWithYearlyTerm","sectionType","setSectionType","showSelectedSection","Loan","getTotalInterest","reduce","sum","current","LevelPayment","getMonthlyPaymentsOnPrincipal","monthlyPayments","getMonthlyPayments","monthlyInterests","getMonthlyInterests","monthlyPayment","getMonthlyPayment","monthlyRateInDecimal","fill","remainingPrincipal","currentMonthInterest","EqualPayment","monthPaymentOnPrincipal","getMonthlyPaymentOnPrincipal","monthlyPaymentOnPrincipal","getMonthlyInterest","monthlyInterest","BulletPayment","monthlyPaymentsOnPrincipal","RepaymentType","LoanTable","currentRepaymentTotal","displayMonthlyPaymentData","CalculationType","repaymentType","INIT_RESULT_STATE","result","setResult","changeRepaymentType","prevResult","bool","RequiredCapitalSection","desiredDividend","dividendRate","dividendRateInDecimal","calculateRequiredCapital","YearlyDividendSection","capitalAmount","calculateYearlyDividend","DiscountType","Dividend","GetRequiredCapital","GetYearlyDividend","CompoundAssetTable","numOfYear","initialAssetAmount","compoundAssetAmounts","yearlyInvestmentAmount","hasYearlyInvestment","prevAssetAmount","currentYear","currentAssetAmount","displayCompoundAssetData","CompoundAssetChart","CompoundAsset","assetAmount","yearlyYield","hasMonthlyInvestment","calculateYearlyCompoundAsset","yearlyCompoundAssets","yearlyYieldInDecimal","Discount","price","discountRate","ItemDiscount","discountPercentage","finalPrice","DiscountCalc","getDiscountedPrice","moneySaved","ItemDiscountComparsion","INIT_ITEM","discountedPrice","items","globalDiscountRate","shouldApplyGlobalDiscountRate","isUpdatedItemsEqualToCurrentItems","useCallback","updatedItems","item","updateInputItems","reset","idx","valInDigit","Number","handlePriceOnChange","handleDiscountRateOnChange","filter","removeItem","populateItems","sortedItems","sort","a","b","sortByDiscountedPriceInDescendingOrder","Home","QuickNavigationButtonList","to","App","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e15666a4.chunk.js","sourcesContent":["interface LinkButtonData {\n    link: string;\n    value: string;\n    className: string;\n};\n\nexport const linkButtonData: Array<LinkButtonData> = [\n    { className: 'btn-primary', link: 'deposit', value: '예금' },\n    { className: 'btn-danger', link: 'loan', value: '대출' },\n    { className: 'btn-success', link: 'dividend', value: '배당' },\n    { className: 'btn-secondary', link: 'compound-asset', value: '자산' },\n    { className: 'btn', link: 'discount', value: '할인' },\n];","import { linkButtonData } from './shared';\n\nexport const Nav = () => {\n    return (\n        <nav className='nav'>\n            <span className='logo'><a href='/'>금융계산기</a></span>\n            <ToggleButton/>\n            <ul className='menu-list'>\n                {linkButtonData.map((data, i) => {\n                    return (\n                        <li key={i}>\n                            <a href={`${data.link}`}>{data.value}</a>\n                        </li>\n                    );\n                })}\n            </ul>\n        </nav>\n    );\n};\n\nconst ToggleButton = () => {\n    return (\n        <>\n            <input type='checkbox' className='menu-btn' id='menu-btn' />\n            <label className='menu-icon' htmlFor='menu-btn'>\n                <span className='fa fa-bars'></span>\n            </label>\n        </>\n    );\n};","export function getRateOfReturn(principal: number, actualInterest: number) {\n    const rateOfReturn = actualInterest / principal * 100;\n\n    return Num.parseFloatWithPrecision(rateOfReturn, 2);\n}\n\nexport const Num = {\n    addCommas(num: number) { \n        return num.toLocaleString();\n    },\n    parseFloatWithPrecision(num: number, decimalPlaces: number) {\n        return parseFloat(num.toFixed(decimalPlaces));\n    },\n};\n\nexport const Rate = {\n    getAnnualRate(termInMonth: number, interestRate: number) {\n        return (termInMonth / 12) * interestRate;\n    },\n    getActualRate(principal: number, actualInterest: number, termInYear: number) {\n        const rateOfReturn = getRateOfReturn(principal, actualInterest);\n        const actualRate = rateOfReturn / termInYear;\n\n        return Num.parseFloatWithPrecision(actualRate, 2);\n    },\n    convertRateToDecimal(rate: number) {\n        return rate / 100;\n    },\n    convertYearlyRateToMonthlyRate(rate: number) {\n        return rate / 12;\n    },\n};\n\nexport const Period = {\n    convertYearToMonth(year: number) {\n        return Math.floor(year * 12);\n    },\n    convertMonthToYear(month: number) {\n        return Math.floor(month / 12);\n    },\n    getPeriodSequences(end: number) {\n        return Array.from({length: end}, (v, k) => (++k));\n    },\n    getPeriodSequencesInString(end: number) {\n        return Array.from({length: end}, (v, k) => (++k).toString());\n    }\n};\n\nexport const String = {\n    removeCommas(string: string) {\n        return string.replaceAll(',', '');\n    },\n    isDigit(value: string) {\n        if (/^[0-9]+$/.test(value)) \n            return true;\n        return false;\n    },\n};","import { useState } from 'react';\nimport { InstallmentSavingSection } from './InstallmentSaving';\nimport { FixedDepositSection } from './FixedDeposit';\n\nenum SavingType {\n    FixedDeposit = 'FixedDeposit',\n    InstallmentSaving = 'InstallmentSaving',\n}\n\nexport const Deposit = () => {\n    const [sectionType, setSectionType] = useState<string>(SavingType.FixedDeposit);\n\n    const showSelectedSection = () => {\n        switch (sectionType) {\n            case SavingType.FixedDeposit:\n                return <FixedDepositSection />;\n            case SavingType.InstallmentSaving:\n                return <InstallmentSavingSection />;\n            default:\n                break;\n        }\n\n        return null;\n    };\n\n    return (\n        <div className='deposit-container'>\n            <div className='input-group'>\n                <label>예금 유형</label>\n                <div className='radio-btn-list-container'>\n                    <input type='radio' id='fixedDeposit' className='radio-btn btn-primary' name='savingType'\n                    checked={sectionType === SavingType.FixedDeposit} readOnly\n                    onClick={() => setSectionType(SavingType.FixedDeposit)} />\n                    <label htmlFor='fixedDeposit'>정기예금</label>\n                    <input type='radio' id='installmentSaving' className='radio-btn btn-primary' name='savingType'\n                    onClick={() => setSectionType(SavingType.InstallmentSaving)} />\n                    <label htmlFor='installmentSaving'>적금</label>\n                </div>\n            </div>\n            <div>\n                {showSelectedSection()}\n            </div>\n        </div>\n    );\n};","import { ChangeEvent } from \"react\";\nimport { String } from \"./utils\";\n\nexport const State = {\n    changePropertyValueToZero(e: ChangeEvent<HTMLInputElement>, setFunction: any) {\n        setFunction((prevForm: any) => ({\n            ...prevForm,\n            [e.target.name]: 0,\n        }));\n    },\n    changeProperty(e: ChangeEvent<HTMLInputElement>, setFunction: any) {\n        setFunction((prevForm: any) => ({\n            ...prevForm,\n            [e.target.name]: e.target.value,\n        }));\n    },\n    changeIntProperty(e: ChangeEvent<HTMLInputElement>, setFunction: any) {\n        if (e.target.value === '') {\n            this.changePropertyValueToZero(e, setFunction);\n            return;\n        }\n\n        setFunction((prevForm: any) => ({\n            ...prevForm,\n            [e.target.name]: parseInt(e.target.value),\n        }));\n    },\n    changeFloatProperty(e: ChangeEvent<HTMLInputElement>, setFunction: any) {\n        if (e.target.value === '') {\n            this.changePropertyValueToZero(e, setFunction);\n            return;\n        }\n\n        setFunction((prevForm: any) => ({\n            ...prevForm,\n            [e.target.name]: parseFloat(e.target.value),\n        }));\n    },\n    changeNumWithCommasProperty(e: ChangeEvent<HTMLInputElement>, setFunction: any) {\n        const { value, name } = e.target;\n\n        if (value === '') {\n            this.changePropertyValueToZero(e, setFunction);\n            return;\n        }\n\n        if (value.includes(',')) {\n            const valueWithoutCommas = String.removeCommas(value);\n\n            setFunction((prevForm: any) => ({\n                ...prevForm,\n                [name]: parseInt(valueWithoutCommas),\n            }));\n            return;\n        }\n\n        if (!String.isDigit(value))\n            return;\n\n        this.changeIntProperty(e, setFunction);\n    },\n};","import { Rate } from '../utils';\n\nclass Deposit {\n    static getTaxOnInterest(interest: number, taxRate: number) {\n        const taxOnInterest = interest * Rate.convertRateToDecimal(taxRate);\n\n        // 세금 소수점 .51부터는 올림\n        if (taxOnInterest - 0.5 > taxOnInterest)\n            return Math.round(taxOnInterest);\n\n        return Math.floor(taxOnInterest);\n    }\n\n    static getCompoundInterestsBeforeTax(principal: number, term: number, interestRate: number) {\n        const interests = [];\n        const interestRateInDecimal = Rate.convertRateToDecimal(interestRate);\n        let prevPrincipalWithInterest = principal;\n\n        for (let i = 0; i < term; i++) {\n            const currentPrincipalWithInterest = prevPrincipalWithInterest + prevPrincipalWithInterest * interestRateInDecimal;\n            const interest = currentPrincipalWithInterest - prevPrincipalWithInterest;\n            interests.push(Math.round(interest));\n\n            prevPrincipalWithInterest = currentPrincipalWithInterest;\n        }\n\n        return interests;\n    }\n\n    static getCompoundInterestsAfterTax(principal: number, term: number, interestRate: number, taxRate: number) {\n        const interests = [];\n        const interestRateInDecimal = Rate.convertRateToDecimal(interestRate);\n        let prevPrincipalWithInterest = principal;\n\n        for (let i = 0; i < term; i++) {\n            const currentPrincipalWithInterest = prevPrincipalWithInterest + prevPrincipalWithInterest * interestRateInDecimal;\n            const interest = currentPrincipalWithInterest - prevPrincipalWithInterest;\n            const tax = this.getTaxOnInterest(interest, taxRate);\n            interests.push(interest - tax);\n\n            prevPrincipalWithInterest = currentPrincipalWithInterest - tax;\n        }\n\n        return interests;\n    }\n\n    static getYearlyCompoundInterestsBeforeTax(principal: number, termInYear: number, interestRate: number) {\n        return this.getCompoundInterestsBeforeTax(principal, termInYear, interestRate);\n    }\n\n    static getMonthlyCompoundInterestsBeforeTax(principal: number, termInMonth: number, interestRate: number) {\n        const monthlyRate = Rate.convertYearlyRateToMonthlyRate(interestRate);\n\n        return this.getCompoundInterestsBeforeTax(principal, termInMonth, monthlyRate);\n    }\n}\n\nexport class FixedDeposit extends Deposit {\n    static getInterestBeforeTax(principal: number, interestRate: number) {\n        const interestBeforeTax = principal * Rate.convertRateToDecimal(interestRate);\n\n        return Math.round(interestBeforeTax);\n    }\n\n    static getYearlyCompoundInterestBeforeTax(principal: number, termInYear: number, interestRate: number) {\n        const interestRateInDecimal = Rate.convertRateToDecimal(interestRate);\n        const principalWithCompoundInterestBeforeTax = principal * Math.pow((1 + interestRateInDecimal), termInYear);\n\n        return Math.round(principalWithCompoundInterestBeforeTax - principal);\n    }\n\n    static getMonthlyCompoundInterestBeforeTax(principal: number, termInMonth: number, interestRate: number) {\n        const monthlyRate = Rate.convertYearlyRateToMonthlyRate(interestRate);\n        const interestRateInDecimal = Rate.convertRateToDecimal(monthlyRate);\n        const principalWithCompoundInterestBeforeTax = principal * Math.pow((1 + interestRateInDecimal), termInMonth);\n\n        return Math.round(principalWithCompoundInterestBeforeTax - principal);\n    }\n\n    static getInterestWithYearlyTermBeforeTax(principal: number, termInYear: number, interestRate: number) {\n        const yearlyInterestBeforeTax = this.getInterestBeforeTax(principal, interestRate);\n\n        return Math.round(yearlyInterestBeforeTax) * termInYear;\n    }\n\n    static getInterestWithMonthlyTermBeforeTax(principal: number, termInMonth: number, interestRate: number) {\n        const annualRate = Rate.getAnnualRate(termInMonth, interestRate);\n\n        return this.getInterestBeforeTax(principal, annualRate);\n    }\n};\n\nexport class InstallmentSaving extends Deposit {\n    static getInterestBeforeTax(monthlySaving: number, termInMonth: number, interestRate: number) {\n        const interestRateInDecimal = Rate.convertRateToDecimal(interestRate);\n        const interest = monthlySaving * termInMonth * (termInMonth + 1) / 2 * interestRateInDecimal / 12;\n\n        return Math.round(interest);\n    }\n\n    static getInterestsBeforeTax(monthlySaving: number, termInMonth: number, interestRate: number) {\n        let interests = [];\n        const interestRateInDecimal = Rate.convertRateToDecimal(interestRate);\n\n        for (let remainingMonth = termInMonth; remainingMonth > 0; remainingMonth--) {\n            const interest = monthlySaving * (remainingMonth / 12) * interestRateInDecimal;\n            interests.push(Math.round(interest));\n        }\n\n        return interests;\n    }\n\n    static getPrincipalWithInterestFromMonthlyCompoundSaving(monthlySaving: number, termInMonth: number, interestRate: number) {\n    /*\n        월 복리 총합 + 원금\n        \n        월 납입금 x (1 + (이자율 / 100) / 12) x \n        (((1 + (이자율 / 100) / 12) ^ 납입개월) - 1) /\n        ((1 + (이자율 / 100) / 12) - 1))\n    */\n        const interestRateInDecimal = Rate.convertRateToDecimal(interestRate);\n        const principalWithCompoundInterestBeforeTax = \n            (monthlySaving * (1 + interestRateInDecimal / 12)) *\n            (Math.pow((1 + interestRateInDecimal / 12), termInMonth) - 1) /\n            ((1 + interestRateInDecimal / 12 ) - 1);\n\n        return Math.round(principalWithCompoundInterestBeforeTax);\n    }\n    \n    static getMonthlyCompoundInterestBeforeTax(monthlySaving: number, termInMonth: number, interestRate: number) {\n        const principal = monthlySaving * termInMonth;\n        const principalWithCompoundInterestBeforeTax = this.getPrincipalWithInterestFromMonthlyCompoundSaving(monthlySaving, termInMonth, interestRate);\n\n        return principalWithCompoundInterestBeforeTax - principal;\n    }\n\n    static getMonthlyCompoundInterestsBeforeTax(monthlySaving: number, termInMonth: number, interestRate: number) {\n    /*\n        월 복리 이자\n        월 납입금 x ((1 + 이자율 / 100 / 12) ^ 남은 개월)\n    */\n        const interests = [];\n        const interestRateInDecimal = Rate.convertRateToDecimal(interestRate);\n\n        for (let remainingMonth = termInMonth; remainingMonth > 0; remainingMonth--) {\n            const monthlySavingWithInterest = monthlySaving * Math.pow((1 + interestRateInDecimal / 12), remainingMonth);\n            const interest = monthlySavingWithInterest - monthlySaving;\n            interests.push(Math.round(interest));\n        }\n\n        return interests;\n    }\n};","export const INIT_LINE_CHART_STATE = {\n    labels: [],\n    datasets: [\n        {\n            label: '',\n            borderColor: '',\n            backgroundColor: '',\n            data: [],\n        },\n    ],\n};\n\nexport const CHART_COLOR = {\n    PRIMARY: 'rgba(0, 73, 207, 0.7)',\n};\n\nexport const LINE_CHART_SETTING = {\n    plugins: {\n        legend: {\n            display: false,\n        },\n    },\n    font: { \n        size: 20,\n    },\n};","import { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Period } from '../../core/utils';\nimport { Chart } from '../../ts/interfaces';\nimport { INIT_LINE_CHART_STATE, CHART_COLOR, LINE_CHART_SETTING } from './shared';\n\ninterface InterestChartProps {\n    interests: number[];\n}\n\ninterface InstallmentSavingInterestChartProps extends InterestChartProps {\n    term: number;\n    isTermInMonth: boolean;\n}\n\ninterface FixedDepositInterestChartProps extends InterestChartProps {\n    termInYear: number;\n    taxRateInDecimal: number;\n    isMonthlyCompoundInterest: boolean;\n    hasTaxOnCompoundInterest: boolean;\n}\n\nexport const InstallmentSavingInterestChart = (props: InstallmentSavingInterestChartProps) => {\n    const [data, setData] = useState<Chart>(INIT_LINE_CHART_STATE);\n    const { interests, isTermInMonth } = props;\n\n    useEffect(() => {\n        const term = isTermInMonth ? props.term : Period.convertYearToMonth(props.term);\n\n        setData({\n            labels: Period.getPeriodSequencesInString(term),\n            datasets: [\n                {\n                    label: '이자',\n                    borderColor: CHART_COLOR.PRIMARY,\n                    backgroundColor: CHART_COLOR.PRIMARY, \n                    data: interests,\n                },\n            ],\n        });\n    }, [interests, isTermInMonth, props.term]);\n\n    const options: any = {\n        responsive: true,\n        plugins: LINE_CHART_SETTING.plugins,\n        scales: {\n            x: {\n                title: {\n                    display: true,\n                    text: '월',\n                    font: LINE_CHART_SETTING.font,\n                },\n            },\n            y: {\n                title: {\n                    display: true,\n                    text: '이자',\n                    font: LINE_CHART_SETTING.font,\n                },\n            },\n        },\n    };\n\n    return <Line data={data} options={options} />;\n};\n\nexport const FixedDepositInterestChart = (props: FixedDepositInterestChartProps) => {\n    const [data, setData] = useState<Chart>(INIT_LINE_CHART_STATE);\n    const { interests, taxRateInDecimal, hasTaxOnCompoundInterest } = props;\n\n    useEffect(() => {\n        const interestsAfterTax = [];\n\n        if (hasTaxOnCompoundInterest) {\n            for (let i = 0; i < interests.length; i++) {\n                const interestAfterTax = interests[i] - Math.round(interests[i] * taxRateInDecimal);\n                interestsAfterTax.push(Math.round(interestAfterTax));\n            }\n        }\n\n        setData({\n            labels: Period.getPeriodSequencesInString(interests.length),\n            datasets: [\n                {\n                    label: '이자',\n                    borderColor: CHART_COLOR.PRIMARY,\n                    backgroundColor: CHART_COLOR.PRIMARY, \n                    data: hasTaxOnCompoundInterest ? interestsAfterTax : interests,\n                },\n            ],\n        });\n    }, [hasTaxOnCompoundInterest, taxRateInDecimal, interests]);\n\n    const options: any = {\n        responsive: true,\n        plugins: LINE_CHART_SETTING.plugins,\n        scales: {\n            x: {\n                title: {\n                    display: true,\n                    text: `${props.isMonthlyCompoundInterest ? '월' : '연'}`,\n                    font: {\n                        size: 20,\n                    },\n                },\n            },\n            y: {\n                title: {\n                    display: true,\n                    text: '이자',\n                    font: {\n                        size: 20,\n                    },\n                },\n            },\n        },\n    };\n\n    return <Line data={data} options={options} />;\n};","import { ReactElement } from 'react';\nimport { Num, Period } from '../../core/utils';\n\ninterface Props {\n    monthlySaving: number;\n    termInMonth: number;\n    isTermInMonth: boolean;\n    interests: number[];\n}\n\nexport const InstallmentSavingInterestTable = (props: Props) => {\n    const { monthlySaving, termInMonth, isTermInMonth, interests } = props;\n    \n    const displayInterestData = (): ReactElement<HTMLTableCellElement>[] | null => {\n        const term = isTermInMonth ? termInMonth : Period.convertYearToMonth(termInMonth);\n        const tableData: ReactElement<HTMLTableCellElement>[] = [];\n        let currentDeposit = 0;\n        let totalInterest = 0;\n\n        if (interests.length !== term)\n            return null;\n\n        for (let i = 0; i < term; i++) {\n            const month = i + 1;\n            currentDeposit += monthlySaving;\n            totalInterest += interests[i];\n\n            tableData.push(\n                <tr key={i}>\n                    <td>{month}</td>\n                    <td>{Num.addCommas(currentDeposit)}</td>\n                    <td>{Num.addCommas(interests[i])}</td>\n                    <td>{Num.addCommas(totalInterest)}</td>\n                </tr>\n            );\n        }\n\n        return tableData;\n    };\n\n    return (\n        <table className='bordered primary'>\n            <thead>\n                <tr>\n                    <th>월</th>\n                    <th>현재 납입금</th>\n                    <th>이자</th>\n                    <th>총 이자</th>\n                </tr>\n            </thead>\n            <tbody>\n                {displayInterestData()}\n            </tbody>\n        </table>\n    );\n};","import { Num } from '../../core/utils';\n\ninterface DepositResultProps {\n    principal: number;\n    interest: number;\n    tax: number;\n    totalAmount: number;\n    actualInterestRate: number;\n}\n\ninterface TaxSelectionProps {\n    taxRate: number;\n    setTaxRate: (taxRate: number) => void;\n}\n\nexport const TAX_TYPE = {\n    INCOME: 15.4,\n    NONE: 0,\n    DISCOUNT: 9.5,\n};\n\nexport const DepositResult = (props: DepositResultProps) => {\n    const { principal, interest, tax, totalAmount, actualInterestRate } = props;\n\n    return (\n        <div>\n            <div className='result-group'>\n                <label>원금</label>\n                <span>{Num.addCommas(principal)}</span>\n            </div>\n            <div className='result-group'>\n                <label>이자</label>\n                <span>{Num.addCommas(interest)}</span>\n            </div>\n            <div className='result-group'>\n                <label>세금</label>\n                <span>{tax === 0 ? Num.addCommas(tax) : `-${Num.addCommas(tax)}`}\n                </span>\n            </div>\n            <div className='result-group'>\n                <label>수령액</label>\n                <span>{Num.addCommas(totalAmount)}</span>\n            </div>\n            <div className='result-group'>\n                <label>실질 금리</label>\n                <span>{actualInterestRate}% / 연</span>\n            </div>\n        </div>\n    );\n};\n\nexport const TaxSelection = (props: TaxSelectionProps) => {\n    const { taxRate, setTaxRate } = props;\n\n    return (\n        <div className='radio-btn-list-container'>\n            <input type='radio' id='taxTypeIncomeTax' className='radio-btn btn-primary' name='taxType'\n            checked={taxRate === TAX_TYPE.INCOME} readOnly\n            onClick={() => setTaxRate(TAX_TYPE.INCOME)} />\n            <label htmlFor='taxTypeIncomeTax'>일반과세</label>\n            <input type='radio' id='taxTypeNone' className='radio-btn btn-primary' name='taxType'\n            onClick={() => setTaxRate(TAX_TYPE.NONE)} />\n            <label htmlFor='taxTypeNone'>비과세</label>\n            <input type='radio' id='taxTypeDiscount' className='radio-btn btn-primary' name='taxType'\n            onClick={() => setTaxRate(TAX_TYPE.DISCOUNT)} />\n            <label htmlFor='taxTypeDiscount'>세금우대</label>\n        </div>\n    );\n};","interface Props {\n    isTermInMonth: boolean;\n    setIsTermInMonth: (val: boolean) => void;\n}\n\nexport const TermSelection = (props: Props) => {\n    const { isTermInMonth, setIsTermInMonth } = props;\n\n    return (\n        <div className='input-group'>\n            <label>기간 유형</label>\n            <div className='btn-list-container'>\n                <button type='button' className={!isTermInMonth ?\n                    'btn-primary' : 'btn-primary outline'}\n                    onClick={() => setIsTermInMonth(false)}>\n                    연\n                </button>\n                <button type='button' className={isTermInMonth ?\n                    'btn-primary' : 'btn-primary outline'}\n                    onClick={() => setIsTermInMonth(true)}>\n                    개월\n                </button>\n            </div>\n        </div>\n    );\n};","import React from 'react';\nimport { ResultState as State, DepositWrappedComponentProps } from '../../ts/interfaces';\n\nexport const WithDepositResult = (WrappedComponent: React.FC<DepositWrappedComponentProps>) => {\n    class HOC extends React.Component<{}, State> {\n        constructor(props: any) {\n            super(props);\n\n            this.state = {\n                principal: 0,\n                interest: 0,\n                interests: [],\n                tax: 0,\n                totalAmount: 0,\n                actualInterestRate: 0,\n            };\n        }\n        \n        INIT_STATE = {\n            principal: 0,\n            interest: 0,\n            interests: [],\n            tax: 0,\n            totalAmount: 0,\n            actualInterestRate: 0,\n        };\n\n        setResultState = (updatedState: State) => {\n            const { principal, interest, interests, tax, totalAmount, actualInterestRate } = updatedState;\n\n            this.setState(prevState => ({\n                ...prevState,\n                principal,\n                interest,\n                interests,\n                tax,\n                totalAmount,\n                actualInterestRate,\n            }));\n        };\n\n        resetResultState = () => this.setState(this.INIT_STATE);\n\n        render() {\n            return (\n                <WrappedComponent \n                    resultState={this.state}\n                    resetResultState={this.resetResultState}\n                    setResultState={this.setResultState}\n                />\n            );\n        }\n    }\n    \n    return HOC;\n};","interface Props {\n    calculate: () => void;\n    resetStates: () => void;\n}\n\nexport const ControlBtnSection = (props: Props) => {\n    return (\n        <div className='control-btn-list-container'>\n            <button type='button' className='btn-success' onClick={() => props.calculate()}>계산</button>\n            <button type='button' className='btn-secondary'\n            onClick={() => props.resetStates()}>초기화</button>\n        </div>\n    );\n};","import { useState } from 'react';\nimport { State } from '../../core/reactState';\nimport { Period, Num, Rate } from '../../core/utils';\nimport { InstallmentSaving } from '../../core/calculator/deposit';\nimport { InstallmentSavingProps } from '../../ts/interfaces';\nimport { InstallmentSavingInterestChart } from '../charts/DepositChart';\nimport { InstallmentSavingInterestTable } from '../tables/InstallmentSavingInterestTable';\nimport { TAX_TYPE, DepositResult, TaxSelection } from './shared';\nimport { TermSelection } from '../shared/TermSelection';\nimport { WithDepositResult } from './WithDepositResult';\nimport { ControlBtnSection } from '../shared/ControlBtnSection';\n\ninterface Input {\n    monthlySaving: number;\n    interestRate: number;\n    termInMonth: number;\n    taxRate: number;\n    isTermInMonth: boolean;\n    isMonthlyCompoundInterest: boolean;\n}\n\nconst InstallmentSavingPage = (props: InstallmentSavingProps) => {\n    const INIT_INPUT_STATE = {\n        monthlySaving: 0,\n        interestRate: 0,\n        termInMonth: 0,\n        taxRate: TAX_TYPE.INCOME,\n        isTermInMonth: true,\n        isMonthlyCompoundInterest: false,\n    };\n\n    const [input, setInput] = useState<Input>(INIT_INPUT_STATE);\n    const { resultState } = props;\n\n    const resetStates = () => {\n        setInput(INIT_INPUT_STATE);\n        props.resetResultState();\n    };\n\n    const switchIsMonthlyCompoundInterest = () => {\n        setInput(prevState => ({\n            ...prevState,\n            isMonthlyCompoundInterest: !input.isMonthlyCompoundInterest,\n        }));\n    };\n\n    const setIsTermInMonth = (val: boolean) => {\n        setInput(prevState => ({\n            ...prevState,\n            isTermInMonth: val,\n        }));\n    };\n\n    const setTaxRate = (val: number) => {\n       setInput(prevState => ({\n            ...prevState,\n            taxRate: val,\n       }));\n    };\n\n    const handleSetResult = (principal: number, interestBeforeTax: number, interests: number[], tax: number, actualInterestRate: number) => {\n        props.setResultState({\n            principal,\n            interest: interestBeforeTax,\n            interests,\n            tax,\n            totalAmount: principal + interestBeforeTax - tax,\n            actualInterestRate,\n        });\n    };\n    \n    const calculateMonthlyCompoundInstallmentSaving = (termInMonth: number) => {\n        const { monthlySaving, interestRate, taxRate } = input;\n        const principal = monthlySaving * termInMonth;\n        const interestBeforeTax = InstallmentSaving.getMonthlyCompoundInterestBeforeTax(monthlySaving, termInMonth, interestRate);\n        const interests = InstallmentSaving.getMonthlyCompoundInterestsBeforeTax(monthlySaving, termInMonth, interestRate);\n        const tax = InstallmentSaving.getTaxOnInterest(interestBeforeTax, taxRate);\n        const actualInterestRate = Rate.getActualRate(principal, interestBeforeTax - tax, Period.convertMonthToYear(termInMonth));\n\n        handleSetResult(principal, interestBeforeTax, interests, tax, actualInterestRate);\n    };\n\n    const calculateInstallmentSaving = (termInMonth: number) => {\n        const { monthlySaving, interestRate, taxRate } = input;\n        const principal = monthlySaving * termInMonth;\n        const interestBeforeTax = InstallmentSaving.getInterestBeforeTax(monthlySaving, termInMonth, interestRate);\n        const interests = InstallmentSaving.getInterestsBeforeTax(monthlySaving, termInMonth, interestRate);\n        const tax = InstallmentSaving.getTaxOnInterest(interestBeforeTax, taxRate);\n        const actualInterestRate = Rate.getActualRate(principal, interestBeforeTax - tax, Period.convertMonthToYear(termInMonth));\n\n        handleSetResult(principal, interestBeforeTax, interests, tax, actualInterestRate);\n    };\n\n    const calculate = () => {\n        const termInMonth = input.isTermInMonth ? \n            input.termInMonth :\n            Period.convertYearToMonth(input.termInMonth);\n\n        if (input.isMonthlyCompoundInterest) {\n            calculateMonthlyCompoundInstallmentSaving(termInMonth);\n            return;\n        }\n\n        calculateInstallmentSaving(termInMonth);\n    };\n\n    return (\n        <div className='installment-saving-container'>\n            <div className='input-container'>\n                <div className='input-group input-with-legend'>\n                    <label>월 적금액</label>\n                    <input type='text' name='monthlySaving'\n                        value={Num.addCommas(input.monthlySaving)}\n                        onChange={(e) => State.changeNumWithCommasProperty(e, setInput)} />\n                </div>\n                <TermSelection isTermInMonth={input.isTermInMonth} setIsTermInMonth={setIsTermInMonth}/>\n                <div className='input-group input-with-legend'>\n                    <label>기간</label>\n                    <input type='number' name='termInMonth'\n                        value={input.termInMonth.toString()}\n                        onChange={(e) => State.changeIntProperty(e, setInput)} />\n                </div>\n                <div className='input-group'>\n                    <label>월복리?</label>\n                    <button type='button' className={input.isMonthlyCompoundInterest ? \n                        'btn-primary' : 'btn-primary outline'}\n                        onClick={() => switchIsMonthlyCompoundInterest()}>\n                        네\n                    </button>\n                </div>\n                <div className='input-group input-with-legend'>\n                    <label>이자 금리</label>\n                    <input type='number' name='interestRate'\n                        onChange={(e) => State.changeFloatProperty(e, setInput)}\n                        value={input.interestRate.toString()} />\n                </div>\n                <TaxSelection taxRate={input.taxRate} setTaxRate={setTaxRate} />\n                <div className='input-group input-with-legend'>\n                    <label>세금</label>\n                    <input type='number' name='taxRate'\n                        value={input.taxRate.toString()}\n                        onChange={(e) => State.changeFloatProperty(e, setInput)} />\n                </div>\n                <ControlBtnSection calculate={calculate} resetStates={resetStates} />\n            </div>\n            <div className='result-container'>\n                <DepositResult\n                    principal={resultState.principal}\n                    interest={resultState.interest}\n                    tax={resultState.tax}\n                    totalAmount={resultState.totalAmount}\n                    actualInterestRate={resultState.actualInterestRate}\n                />\n                <InstallmentSavingInterestChart\n                    term={input.termInMonth}\n                    isTermInMonth={input.isTermInMonth}\n                    interests={resultState.interests}\n                />\n                <InstallmentSavingInterestTable\n                    monthlySaving={input.monthlySaving}\n                    termInMonth={input.termInMonth}\n                    isTermInMonth={input.isTermInMonth}\n                    interests={resultState.interests}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport const InstallmentSavingSection = WithDepositResult(InstallmentSavingPage);","import { ReactElement } from 'react';\nimport { Num } from '../../core/utils';\n\ninterface Props {\n    principal: number;\n    term: number;\n    taxRateInDecimal: number;\n    interests: number[];\n    hasTaxOnCompoundInterest: boolean;\n    isYearlyCompoundSaving: boolean;\n}\n\nexport const FixedDepositInterestTable = (props: Props) => {\n    const { principal, interests, taxRateInDecimal, hasTaxOnCompoundInterest, isYearlyCompoundSaving } = props;\n\n    const displayInterestData = (): ReactElement<HTMLTableCellElement>[] | null => {\n        const tableData: ReactElement<HTMLTableCellElement>[] = [];\n        let prevTotalAmount = principal;\n\n        interests.forEach((interest, i) => {\n            const currentTerm = i + 1;\n            const tax = Math.round(interest * taxRateInDecimal);\n            const interestAfterTax = interest - tax;\n\n            if (hasTaxOnCompoundInterest) {\n                tableData.push( \n                    <tr key={i}>\n                        <td>{currentTerm}</td>\n                        <td>{Num.addCommas(prevTotalAmount)}</td>\n                        <td>{Num.addCommas(interest)}</td>\n                        <td>{Num.addCommas(tax)}</td>\n                        <td>{Num.addCommas(interestAfterTax)}</td>\n                        <td>{Num.addCommas(prevTotalAmount + interestAfterTax)}</td>\n                    </tr>\n                );\n\n                prevTotalAmount += interestAfterTax;\n            } else {\n                tableData.push(\n                    <tr key={i}>\n                        <td>{currentTerm}</td>\n                        <td>{Num.addCommas(prevTotalAmount)}</td>\n                        <td>{Num.addCommas(interest)}</td>\n                        <td>{Num.addCommas(prevTotalAmount + interest)}</td>\n                    </tr>\n                );\n\n                prevTotalAmount += interest;\n            }\n        });\n\n        return tableData;\n    };\n\n    const displayTableHeader = () => {\n        return <tr>\n                    <th>{isYearlyCompoundSaving ? '연' : '월'}</th>\n                    <th>총 금액</th>\n                    <th>이자</th>\n                    {hasTaxOnCompoundInterest ? \n                        <>\n                            <th>세금</th>\n                            <th>세후 이자</th>\n                            <th>총 금액 + 세후 이자</th>\n                        </> \n                        :\n                        <>\n                            <th>총 금액 + 이자</th>\n                        </>\n                    }\n            </tr>\n    };\n\n    return (\n        <table className='bordered primary'>\n            <thead>\n                {displayTableHeader()}\n            </thead>\n            <tbody>\n                {displayInterestData()}\n            </tbody>\n        </table>\n    );\n};","import { useState } from 'react';\nimport { Num, Period, Rate } from '../../core/utils';\nimport { State } from '../../core/reactState';\nimport { FixedDeposit } from '../../core/calculator/deposit';\nimport { FixedDepositProps } from '../../ts/interfaces';\nimport { FixedDepositInterestChart } from '../charts/DepositChart';\nimport { FixedDepositInterestTable } from '../tables/FixedDepositInterestTable';\nimport { TAX_TYPE, DepositResult, TaxSelection } from './shared';\nimport { TermSelection } from '../shared/TermSelection';\nimport { WithDepositResult } from './WithDepositResult';\nimport { ControlBtnSection } from '../shared/ControlBtnSection';\n\ninterface Input {\n    principal: number;\n    interestRate: number;\n    termInYear: number;\n    taxRate: number;\n    hasTaxOnCompoundInterest: boolean;\n    isTermInMonth: boolean;\n    isCompoundSaving: boolean;\n    isMonthlyCompoundInterest: boolean;\n}\n\nconst FixedDepositPage = (props: FixedDepositProps) => {\n    const INIT_INPUT_STATE = {\n        principal: 0,\n        interestRate: 0,\n        termInYear: 0,\n        taxRate: TAX_TYPE.INCOME, \n        hasTaxOnCompoundInterest: false,\n        isTermInMonth: false,\n        isCompoundSaving: false,\n        isMonthlyCompoundInterest: false,\n    };\n\n    const [input, setInput] = useState<Input>(INIT_INPUT_STATE);\n    const { resultState } = props;\n\n    const resetStates = () => {\n        setInput(INIT_INPUT_STATE);\n        props.resetResultState();\n    };\n\n    const switchIsCompoundSaving = () => {\n        setInput(prevState => ({\n            ...prevState,\n            isCompoundSaving: !input.isCompoundSaving,\n        }));\n    };\n\n    const switchHasTaxOnCompoundInterest = () => {\n        setInput(prevState => ({\n            ...prevState,\n            hasTaxOnCompoundInterest: !input.hasTaxOnCompoundInterest,\n        }));\n    };\n\n    const setTaxRate = (val: number) => {\n       setInput(prevState => ({\n            ...prevState,\n            taxRate: val,\n       }));\n    };\n\n    const setIsTermInMonth = (val: boolean) => {\n       setInput(prevState => ({\n            ...prevState,\n            isTermInMonth: val,\n        }));\n    };\n\n    const setIsMonthlyCompoundInterest = (val: boolean) => {\n       setInput(prevState => ({\n            ...prevState,\n            isMonthlyCompoundInterest: val,\n        }));\n    };\n\n    const setStandardSavingResult = (principal: number, interestBeforeTax: number, tax: number, actualInterestRate: number) => {\n        props.setResultState({\n            principal,\n            interest: interestBeforeTax,\n            interests: [],\n            tax,\n            totalAmount: principal + interestBeforeTax - tax,\n            actualInterestRate,\n        });\n    };\n\n    const setCompoundSavingResult = (principal: number, interestBeforeTax: number, interests: number[],\n    tax: number, actualInterestRate: number) => {\n        props.setResultState({\n            principal,\n            interest: interestBeforeTax,\n            interests,\n            tax,\n            totalAmount: principal + interestBeforeTax - tax,\n            actualInterestRate,\n        });\n    };\n\n    const calculateWithMonthlyTerm = () => {\n        const { principal, termInYear, interestRate, taxRate } = input;\n        const termInMonth = termInYear;\n        const interestBeforeTax = FixedDeposit.getInterestWithMonthlyTermBeforeTax(principal, termInMonth, interestRate);\n        const tax = FixedDeposit.getTaxOnInterest(interestBeforeTax, taxRate);\n        const actualInterestRate = Rate.getActualRate(principal, interestBeforeTax - tax, Period.convertMonthToYear(termInMonth));\n\n        setStandardSavingResult(principal, interestBeforeTax, tax, actualInterestRate);\n    };\n\n    const calculateWithYearlyTerm = () => {\n        const { principal, termInYear, interestRate, taxRate } = input;\n        const interestBeforeTax = FixedDeposit.getInterestWithYearlyTermBeforeTax(principal, termInYear, interestRate);\n        const tax = FixedDeposit.getTaxOnInterest(interestBeforeTax, taxRate);\n        const actualInterestRate = Rate.getActualRate(principal, interestBeforeTax - tax, termInYear);\n\n        setStandardSavingResult(principal, interestBeforeTax, tax, actualInterestRate);\n    };\n\n    const calculateYearlyCompoundSaving = () => {\n        const { principal, interestRate, taxRate } = input;\n        const termInYear = input.isTermInMonth ? Period.convertMonthToYear(input.termInYear) : input.termInYear;\n        const interestBeforeTax = FixedDeposit.getYearlyCompoundInterestBeforeTax(principal, termInYear, interestRate);\n        const interests = FixedDeposit.getYearlyCompoundInterestsBeforeTax(principal, termInYear, interestRate);\n        const tax = FixedDeposit.getTaxOnInterest(interestBeforeTax, taxRate);\n        const actualInterestRate = Rate.getActualRate(principal, interestBeforeTax - tax, termInYear);\n\n        setCompoundSavingResult(principal, interestBeforeTax, interests, tax, actualInterestRate);\n    };\n  \n    const calculateMonthlyCompoundSaving = () => {\n        const { principal, termInYear, interestRate, taxRate } = input;\n        const termInMonth = input.isTermInMonth ? termInYear : Period.convertYearToMonth(termInYear);\n        const interestBeforeTax = FixedDeposit.getMonthlyCompoundInterestBeforeTax(principal, termInMonth, interestRate)\n        const interests = FixedDeposit.getMonthlyCompoundInterestsBeforeTax(principal, termInMonth, interestRate);\n        const tax = FixedDeposit.getTaxOnInterest(interestBeforeTax, taxRate);\n        const actualInterestRate = Rate.getActualRate(principal, interestBeforeTax - tax, termInYear);\n\n        setCompoundSavingResult(principal, interestBeforeTax, interests, tax, actualInterestRate);\n    }\n\n    const calculate = () => {\n        const { isTermInMonth, isCompoundSaving, isMonthlyCompoundInterest } = input;\n\n        if (isCompoundSaving) {\n            if (isMonthlyCompoundInterest) {\n                calculateMonthlyCompoundSaving();\n            } else {\n                calculateYearlyCompoundSaving();\n            }\n            return;\n        }\n\n        if (isTermInMonth) {\n            calculateWithMonthlyTerm();\n            return;\n        }\n\n        calculateWithYearlyTerm();\n    };\n\n    return (\n        <div className='fixed-deposit-container'>\n            <div className='input-container'>\n                <div className='input-group input-with-legend'>\n                    <label>원금</label>\n                    <input type='text' name='principal'\n                    value={Num.addCommas(input.principal).toString()}\n                    onChange={(e) => State.changeNumWithCommasProperty(e, setInput)} />\n                </div>\n                <TermSelection isTermInMonth={input.isTermInMonth} setIsTermInMonth={setIsTermInMonth}/>\n                <div className='input-group input-with-legend'>\n                    <label>기간</label>\n                    <input type='number' name='termInYear' value={input.termInYear.toString()}\n                    onChange={(e) => State.changeIntProperty(e, setInput)} />\n                </div>\n                <div className='input-group'>\n                    <label>복리?</label>\n                    <button type='button' className={input.isCompoundSaving ?\n                        'btn-primary' : 'btn-primary outline'}\n                        onClick={() => switchIsCompoundSaving()}>\n                        네\n                    </button>\n                </div>\n                { input.isCompoundSaving &&\n                <> \n                    <div className='input-group'>\n                        <label>복리 유형</label>\n                        <div className='btn-list-container'>\n                            <button type='button' className={!input.isMonthlyCompoundInterest ?\n                                'btn-primary' :  'btn-primary outline'}\n                                onClick={() => setIsMonthlyCompoundInterest(false)}>\n                                연간\n                            </button>\n                            <button type='button' className={input.isMonthlyCompoundInterest ?\n                                'btn-primary' :  'btn-primary outline'}\n                                onClick={() => setIsMonthlyCompoundInterest(true)}>\n                                월간\n                            </button>\n                        </div>\n                    </div>\n                    <div className='input-group'>\n                        <label>복리 이자 세금?</label>\n                            <button type='button' className={input.hasTaxOnCompoundInterest ?\n                                'btn-primary' :  'btn-primary outline'}\n                                onClick={() => switchHasTaxOnCompoundInterest()}>\n                                네\n                            </button>\n                    </div>\n                </> \n                }\n                <div className='input-group input-with-legend'>\n                    <label>이자 금리</label>\n                    <input type='number' name='interestRate'\n                        onChange={(e) => State.changeFloatProperty(e, setInput)}\n                        value={input.interestRate.toString()} />\n                </div>\n                <TaxSelection taxRate={input.taxRate} setTaxRate={setTaxRate} />\n                <div className='input-group input-with-legend'>\n                    <label>세금</label>\n                    <input type='number' name='taxRate'\n                        value={input.taxRate.toString()}\n                        onChange={(e) => State.changeFloatProperty(e, setInput)} />\n                </div>\n                <ControlBtnSection calculate={calculate} resetStates={resetStates} />\n            </div>\n            <div className='result-container'>\n                <DepositResult\n                    principal={input.principal}\n                    interest={resultState.interest}\n                    tax={resultState.tax}\n                    totalAmount={resultState.totalAmount}\n                    actualInterestRate={resultState.actualInterestRate}\n                />\n                { input.isCompoundSaving &&\n                <>\n                    <FixedDepositInterestChart\n                        interests={resultState.interests}\n                        termInYear={input.termInYear}\n                        taxRateInDecimal={Rate.convertRateToDecimal(input.taxRate)}\n                        hasTaxOnCompoundInterest={input.hasTaxOnCompoundInterest}\n                        isMonthlyCompoundInterest={input.isMonthlyCompoundInterest}\n                    />\n                    <FixedDepositInterestTable \n                        principal={input.principal}\n                        term={input.termInYear} \n                        interests={resultState.interests}\n                        taxRateInDecimal={Rate.convertRateToDecimal(input.taxRate)}\n                        isYearlyCompoundSaving={input.isCompoundSaving && !input.isMonthlyCompoundInterest}\n                        hasTaxOnCompoundInterest={input.hasTaxOnCompoundInterest}\n                    />\n                </>\n                }\n            </div>\n        </div>\n    );\n};\n\nexport const FixedDepositSection = WithDepositResult(FixedDepositPage);","import { Rate } from '../utils';\nclass Loan {\n    static getTotalInterest = (interests: number[]) => {\n        return interests.reduce((sum, current) => sum + current, 0);\n    }\n}\n\n/*\n    원리금 균등 상환 (동일한 매월 상환금)\n    \n    원금 * 월이자율 * (1 + 월이자율)^상환기간 \n    /\n    (1 + 월이자율)^상환기간 - 1\n*/\n\nexport class LevelPayment extends Loan {\n    static getMonthlyPaymentsOnPrincipal = (principal: number, termInMonth: number, interestRate: number) => {\n        const monthlyPayments = this.getMonthlyPayments(principal, termInMonth, interestRate);\n        const monthlyInterests = this.getMonthlyInterests(principal, termInMonth, interestRate);\n\n        const monthlyPaymentsOnPrincipal = monthlyPayments.map((monthlyPayment, i) => {\n            return monthlyPayment - monthlyInterests[i];\n        });\n        \n        return monthlyPaymentsOnPrincipal;\n    }\n\n    static getMonthlyPayment = (principal: number, termInMonth: number, interestRate: number) => {\n        const interestRateInDecimal = Rate.convertRateToDecimal(interestRate);\n        const monthlyRateInDecimal = Rate.convertYearlyRateToMonthlyRate(interestRateInDecimal);\n\n        const monthlyPayment = \n            (principal * monthlyRateInDecimal * Math.pow((1 + monthlyRateInDecimal), termInMonth))\n            / (Math.pow((1 + monthlyRateInDecimal), termInMonth) - 1);\n\n        return Math.round(monthlyPayment);\n    }\n\n    static getMonthlyPayments = (principal: number, termInMonth: number, interestRate: number) => {\n        const monthlyPayment = this.getMonthlyPayment(principal, termInMonth, interestRate);\n\n        return Array(termInMonth).fill(monthlyPayment);\n    }\n\n    // 매월 이자 계산 => 잔금 * 월이자율\n    static getMonthlyInterests = (principal: number, termInMonth: number, interestRate: number) => {\n        let remainingPrincipal = principal;\n        const monthlyInterests: number[] = [];\n        const monthlyPayment = this.getMonthlyPayment(principal, termInMonth, interestRate);\n        const interestRateInDecimal = Rate.convertRateToDecimal(interestRate);\n        const monthlyRateInDecimal = Rate.convertYearlyRateToMonthlyRate(interestRateInDecimal);\n\n        for (let i = 0; i < termInMonth; i++) {\n            const currentMonthInterest = Math.round(remainingPrincipal * monthlyRateInDecimal);\n            monthlyInterests.push(currentMonthInterest);\n            remainingPrincipal -= (monthlyPayment - currentMonthInterest);\n        }\n\n        return monthlyInterests;\n    }\n}\n\n/*\n    원금 균등 상환 (월 납입 = 납입 원금 + 이자)\n\n    월 납입 = (원금 / 총 대출기간) + (원금 잔액 / 남은 대출기간 * 이자)\n*/\nexport class EqualPayment extends Loan {\n    static getMonthlyPayments = (principal: number, termInMonth: number, interestRate: number) => {\n        let remainingPrincipal = principal;\n        const monthlyPayments: number[] = [];\n        const monthPaymentOnPrincipal = this.getMonthlyPaymentOnPrincipal(principal, termInMonth);\n        const interestRateInDecimal = Rate.convertRateToDecimal(interestRate);\n        const monthlyRateInDecimal = Rate.convertYearlyRateToMonthlyRate(interestRateInDecimal);\n\n        for (let i = 0; i < termInMonth; i++) { \n            const currentMonthInterest = Math.round(remainingPrincipal * monthlyRateInDecimal);\n            monthlyPayments.push(monthPaymentOnPrincipal + currentMonthInterest);\n            remainingPrincipal -= monthPaymentOnPrincipal;\n        }\n\n        return monthlyPayments;\n    }\n\n    static getMonthlyInterests = (principal: number, termInMonth: number, interestRate: number) => {\n        let remainingPrincipal = principal;\n        const monthlyInterests: number[] = [];\n        const interestRateInDecimal = Rate.convertRateToDecimal(interestRate);\n        const monthlyPaymentOnPrincipal = this.getMonthlyPaymentOnPrincipal(principal, termInMonth);\n        const monthlyRateInDecimal = Rate.convertYearlyRateToMonthlyRate(interestRateInDecimal);\n        \n        for (let i = 0; i < termInMonth; i++) {\n            const currentMonthInterest = remainingPrincipal * monthlyRateInDecimal;\n            monthlyInterests.push(Math.round(currentMonthInterest));\n            remainingPrincipal -= monthlyPaymentOnPrincipal;\n        }\n\n        return monthlyInterests;\n    }\n\n    static getMonthlyInterest = (principal: number, termInMonth: number, interestRate: number) => {\n        let monthlyInterest = 0;\n        let remainingPrincipal = principal;\n        const interestRateInDecimal = Rate.convertRateToDecimal(interestRate);\n        const monthlyPaymentOnPrincipal = this.getMonthlyPaymentOnPrincipal(principal, termInMonth);\n        const monthlyRateInDecimal = Rate.convertYearlyRateToMonthlyRate(interestRateInDecimal);\n        \n        for (let i = 0; i < termInMonth; i++) {\n            const currentMonthInterest = remainingPrincipal / monthlyRateInDecimal;\n            monthlyInterest += Math.round(currentMonthInterest);\n            remainingPrincipal -= monthlyPaymentOnPrincipal;\n        }\n\n        return monthlyInterest;\n    }\n\n    static getMonthlyPaymentOnPrincipal = (principal: number, termInMonth: number) => {\n        return Math.round(principal / termInMonth);\n    }\n\n    static getMonthlyPaymentsOnPrincipal = (principal: number, termInMonth: number) => {\n        const monthlyPayment = Math.round(principal / termInMonth);\n\n        return Array(termInMonth).fill(monthlyPayment);\n    }\n}\n\n/*\n    원금만기일시상환\n\n    첫달 ~ 마지막달 전 달까지 = 이자 납부\n    마지막달 = 이자 납부 + 원금\n*/\nexport class BulletPayment {\n    static getMonthlyPaymentOnPrincipal = () => {\n        return 0;\n    }\n\n    static getMonthlyPaymentsOnPrincipal = (principal: number, termInMonth: number) => {\n        const monthlyPaymentsOnPrincipal = Array(termInMonth).fill(this.getMonthlyPaymentOnPrincipal());\n        monthlyPaymentsOnPrincipal[monthlyPaymentsOnPrincipal.length - 1] += principal;\n\n        return monthlyPaymentsOnPrincipal;\n    }\n\n    static getTotalInterest = (principal: number, termInMonth: number, interestRate: number) => {\n        const interestRateInDecimal = Rate.convertRateToDecimal(interestRate);\n\n        return Math.round(principal * interestRateInDecimal * (termInMonth / 12));\n    }\n\n    static getMonthlyInterest = (principal: number, termInMonth: number, interestRate: number) => {\n        const totalInterest = this.getTotalInterest(principal, termInMonth, interestRate);\n\n        return Math.round(totalInterest / termInMonth);\n    }\n\n    static getMonthlyInterests = (principal: number, termInMonth: number, interestRate: number) => {\n        const monthlyInterest = this.getMonthlyInterest(principal, termInMonth, interestRate);\n\n        return Array(termInMonth).fill(monthlyInterest);\n    }\n\n    static getMonthlyPayments = (principal: number, termInMonth: number, interestRate: number) => {\n        const monthlyPayments = this.getMonthlyInterests(principal, termInMonth, interestRate);\n        monthlyPayments[monthlyPayments.length - 1] += principal;\n\n        return monthlyPayments;\n    }\n}","import { ReactElement } from 'react';\nimport { Num } from '../../core/utils';\n\ninterface Props {\n    principal: number;\n    termInMonth: number;\n    monthlyInterests: number[];\n    monthlyPayments: number[];\n    monthlyPaymentsOnPrincipal: number[];\n}\n\nexport const LoanTable = (props: Props) => {\n    const { principal, termInMonth, monthlyPayments, monthlyInterests, monthlyPaymentsOnPrincipal } = props;\n\n    const displayMonthlyPaymentData = (): ReactElement<HTMLTableCellElement>[] | null => {\n        if (monthlyInterests.length !== termInMonth)\n            return null;\n\n        const tableData: ReactElement<HTMLTableCellElement>[] = [];\n        let currentRepaymentTotal = 0;\n\n        for (let i = 0; i < termInMonth; i++) {\n            const currentTerm = i + 1;\n            currentRepaymentTotal += monthlyPaymentsOnPrincipal[i];\n\n            tableData.push(\n                <tr key={i}>\n                    <td>{currentTerm}</td>\n                    <td>{Num.addCommas(monthlyPaymentsOnPrincipal[i])}</td>\n                    <td>{Num.addCommas(monthlyInterests[i])}</td>\n                    <td>{Num.addCommas(monthlyPayments[i])}</td>\n                    <td>{Num.addCommas(currentRepaymentTotal)}</td>\n                    <td>{Num.addCommas(principal - currentRepaymentTotal)}</td>\n                </tr>\n            );\n        }\n\n        return tableData;\n    };\n\n    return (\n        <table className='bordered primary'>\n            <thead>\n                <tr>\n                    <th>월</th>\n                    <th>원금</th>\n                    <th>이자</th>\n                    <th>상환금</th>\n                    <th>총 납입원금</th>\n                    <th>잔금</th>\n                </tr>\n            </thead>\n            <tbody>\n                {displayMonthlyPaymentData()}\n            </tbody>\n        </table>\n    );\n};\n","import { useState } from 'react';\nimport { Period, Num } from '../../core/utils';\nimport { State } from '../../core/reactState';\nimport { TermSelection } from '../shared/TermSelection';\nimport { LevelPayment, BulletPayment, EqualPayment } from '../../core/calculator/loan';\nimport { LoanTable } from '../tables/LoanTable';\nimport { ControlBtnSection } from '../shared/ControlBtnSection';\n\ninterface LoanState {\n    principal: number;\n    termInMonth: number;\n    isTermInMonth: boolean;\n    interestRate: number;\n    repaymentType: string;\n}\n\ninterface Result {\n    interest: number;\n    monthlyInterests: number[];\n    monthlyPaymentsOnPrincipal: number[];\n    monthlyPayments: number[];\n}\n\nenum RepaymentType {\n    LevelPayment = 'LEVEL_PAYMENT',\n    EqualPayment = 'EqualPayment',\n    BulletPayment = 'BulletPayment',\n};\n\nexport const Loan = () => {\n    const INIT_INPUT_STATE = {\n        principal: 0,\n        termInMonth: 0,\n        interestRate: 0,\n        isTermInMonth: true,\n        repaymentType: RepaymentType.LevelPayment,\n    };\n\n    const INIT_RESULT_STATE = {\n        interest: 0,\n        monthlyInterests: [],\n        monthlyPaymentsOnPrincipal: [],\n        monthlyPayments: [],\n    };\n\n    const [input, setInput] = useState<LoanState>(INIT_INPUT_STATE);\n    const [result, setResult] = useState<Result>(INIT_RESULT_STATE);\n\n    const resetStates = () => {\n        setInput(INIT_INPUT_STATE);\n        setResult(INIT_RESULT_STATE);\n    };\n\n    const changeRepaymentType = (type: string) => {\n        setInput(prevState => ({\n            ...prevState,\n            repaymentType: type,\n        }));\n    };\n\n    const setIsTermInMonth = (bool: boolean) => {\n        setInput(prevState => ({\n            ...prevState,\n            isTermInMonth: bool,\n        }));\n    };\n\n    const calculate = (termInMonth: number) => {\n        const { principal, interestRate, repaymentType } = input;\n        let monthlyInterests: number[] = [];\n        let monthlyPayments: number[] = [];\n        let monthlyPaymentsOnPrincipal: number[] = [];\n        let interest = 0;\n\n        switch (repaymentType) {\n            case RepaymentType.LevelPayment:\n                monthlyInterests = LevelPayment.getMonthlyInterests(principal, termInMonth, interestRate);\n                monthlyPayments = LevelPayment.getMonthlyPayments(principal, termInMonth, interestRate);\n                monthlyPaymentsOnPrincipal = LevelPayment.getMonthlyPaymentsOnPrincipal(principal, termInMonth, interestRate);\n                interest = LevelPayment.getTotalInterest(monthlyInterests);\n                break;\n            case RepaymentType.EqualPayment:\n                monthlyInterests = EqualPayment.getMonthlyInterests(principal, termInMonth, interestRate);\n                monthlyPayments = EqualPayment.getMonthlyPayments(principal, termInMonth, interestRate);\n                monthlyPaymentsOnPrincipal = EqualPayment.getMonthlyPaymentsOnPrincipal(principal, termInMonth);\n                interest = EqualPayment.getTotalInterest(monthlyInterests);\n                break;\n            case RepaymentType.BulletPayment:\n                monthlyInterests = BulletPayment.getMonthlyInterests(principal, termInMonth, interestRate);\n                monthlyPayments = BulletPayment.getMonthlyPayments(principal, termInMonth, interestRate);\n                monthlyPaymentsOnPrincipal = BulletPayment.getMonthlyPaymentsOnPrincipal(principal, termInMonth);\n                interest = BulletPayment.getTotalInterest(principal, termInMonth, interestRate);\n                break;\n        }\n\n        setResult(prevResult => ({\n            ...prevResult,\n            interest,\n            monthlyInterests,\n            monthlyPayments,\n            monthlyPaymentsOnPrincipal,\n        }));\n    };\n\n    const handleCalculate = () => {\n        if (input.isTermInMonth) {\n            calculate(input.termInMonth);\n            return;\n        }\n\n        calculate(Period.convertYearToMonth(input.termInMonth));\n    };\n\n    return (\n        <div className='loan-container'>\n            <div className='input-container'>\n                <div className='input-group input-with-legend'>\n                    <input type='text' name='principal'\n                    value={Num.addCommas(input.principal).toString()}\n                    onChange={(e) => State.changeNumWithCommasProperty(e, setInput)} />\n                    <label>대출금액</label>\n                </div>\n                <TermSelection isTermInMonth={input.isTermInMonth} setIsTermInMonth={setIsTermInMonth}/>\n                <div className='input-group input-with-legend'>\n                    <label>기간</label>\n                    <input type='number' name='termInMonth' value={input.termInMonth.toString()}\n                    onChange={(e) => State.changeIntProperty(e, setInput)} />\n                </div>\n                <div className='input-group input-with-legend'>\n                    <label>이자 금리</label>\n                    <input type='number' name='interestRate'\n                        onChange={(e) => State.changeFloatProperty(e, setInput)}\n                        value={input.interestRate.toString()} />\n                </div>\n                <div className='input-group'>\n                    <label>상환 유형</label>\n                    <div className='radio-btn-list-container'>\n                        <input type='radio' id='incomeTax' className='radio-btn btn-primary' name='taxType'\n                        checked={input.repaymentType === RepaymentType.LevelPayment} readOnly\n                        onClick={() => changeRepaymentType(RepaymentType.LevelPayment)} />\n                        <label htmlFor='incomeTax'>원리금균등</label>\n                        <input type='radio' id='none' className='radio-btn btn-primary' name='taxType'\n                        onClick={() => changeRepaymentType(RepaymentType.EqualPayment)} />\n                        <label htmlFor='none'>원금균등</label>\n                        <input type='radio' id='discount' className='radio-btn btn-primary' name='taxType'\n                        onClick={() => changeRepaymentType(RepaymentType.BulletPayment)} />\n                        <label htmlFor='discount'>만기일시</label>\n                    </div>\n                </div>\n                <ControlBtnSection calculate={handleCalculate} resetStates={resetStates}/>\n            </div>\n            <div className='result-container'>\n                <div className='result-calculation'>\n                    <div className='result-group'>\n                        <label>대출원금</label>\n                        <span>{Num.addCommas(input.principal)}</span>\n                    </div>\n                    <div className='result-group'>\n                        <label>총 이자</label>\n                        <span>{Num.addCommas(result.interest)}</span>\n                    </div>\n                    <div className='result-group'>\n                        <label>총 상환 금액</label>\n                        <span>{Num.addCommas(input.principal + result.interest)}</span>\n                    </div>\n                </div>\n                <LoanTable principal={input.principal}\n                    termInMonth={input.isTermInMonth ? input.termInMonth : Period.convertYearToMonth(input.termInMonth)}\n                    monthlyInterests={result.monthlyInterests}\n                    monthlyPayments={result.monthlyPayments}\n                    monthlyPaymentsOnPrincipal={result.monthlyPaymentsOnPrincipal}\n                />\n            </div>\n        </div>\n    );\n};","import { useState } from 'react';\nimport { YearlyDividendSection, RequiredCapitalSection } from './DividendSection';\n\nenum CalculationType {\n    GetRequiredCapital = 'GetRequiredCapital',\n    GetYearlyDividend = 'GetYearlyDividend',\n}\n\nexport const Dividend = () => {\n    const [sectionType, setSectionType] = useState<string>(CalculationType.GetRequiredCapital);\n\n    const showSelectedSection = () => {\n        switch (sectionType) {\n            case CalculationType.GetRequiredCapital:\n                return <RequiredCapitalSection />;\n            case CalculationType.GetYearlyDividend:\n                return <YearlyDividendSection />;\n            default:\n                break;\n        }\n\n        return null;\n    };\n\n    return (\n        <div className='dividend-container'>\n            <div className='radio-btn-list-container'>\n                <input type='radio' id='dividendTypeYearlyDividend' className='radio-btn btn-primary' name='dividendType'\n                checked={sectionType === CalculationType.GetRequiredCapital} readOnly\n                onClick={() => setSectionType(CalculationType.GetRequiredCapital)} />\n                <label htmlFor='dividendTypeYearlyDividend'>희망 연배당에 필요한 금액</label>\n                <input type='radio' id='dividendTypeRequiredCapital' className='radio-btn btn-primary' name='dividendType'\n                onClick={() => setSectionType(CalculationType.GetYearlyDividend)} />\n                <label htmlFor='dividendTypeRequiredCapital'>연배당</label>\n            </div>\n            {showSelectedSection()}\n        </div>\n    );\n};","import { useState } from 'react';\nimport { Num, Rate } from '../../core/utils';\nimport { State } from '../../core/reactState';\n\ninterface RequiredCapitalSectionState {\n    desiredDividend: number;\n    dividendRate: number;\n}\n\ninterface YearlyDividendSectionState {\n    capitalAmount: number;\n    dividendRate: number;\n}\n\nexport const RequiredCapitalSection = () => {\n    const [input, setInput] = useState<RequiredCapitalSectionState>({\n        desiredDividend: 0,\n        dividendRate: 0,\n    });\n\n    const calculateRequiredCapital = () => {\n        const dividendRateInDecimal = Rate.convertRateToDecimal(input.dividendRate);\n        return Math.round(input.desiredDividend / dividendRateInDecimal);\n    };\n\n    return (\n        <div className='required-capital-container'>\n            <div className='input-group input-with-legend'>\n                <label>희망 연배당</label>\n                <input type='text' name='desiredDividend' \n                    value={Num.addCommas(input.desiredDividend)}\n                    onChange={(e) => State.changeNumWithCommasProperty(e, setInput)}\n                />\n            </div>\n            <div className='input-group input-with-legend'>\n                <label>배당률</label>\n                <input type='number' name='dividendRate' \n                    value={input.dividendRate.toString()}\n                    onChange={(e) => State.changeFloatProperty(e, setInput)}\n                />\n            </div>\n            <div className='result-container'>\n                <div className='result-group'>\n                    <label>필요 금액</label>\n                    <span>{Num.addCommas(calculateRequiredCapital())}</span>\n                </div> \n            </div>\n        </div>\n    );\n};\n\nexport const YearlyDividendSection = () => {\n    const [input, setInput] = useState<YearlyDividendSectionState>({\n        capitalAmount: 0,\n        dividendRate: 0,\n    });\n\n    const calculateYearlyDividend = () => {\n        const { capitalAmount, dividendRate } = input;\n        const dividendRateInDecimal = Rate.convertRateToDecimal(dividendRate);\n\n        return Math.round(capitalAmount * dividendRateInDecimal);\n    };\n\n    return (\n        <div className='yearly-dividend-container'>\n            <div className='input-group input-with-legend'>\n                <label>투자 금액</label>\n                <input type='text' name='capitalAmount' \n                    value={Num.addCommas(input.capitalAmount)}\n                    onChange={(e) => State.changeNumWithCommasProperty(e, setInput)}\n                />\n            </div>\n            <div className='input-group input-with-legend'>\n                <label>배당률</label>\n                <input type='number' name='dividendRate' \n                    value={input.dividendRate.toString()}\n                    onChange={(e) => State.changeFloatProperty(e, setInput)}\n                />\n            </div>\n            <div className='result-container'>\n                <div className='result-group'>\n                    <label>연 배당</label>\n                    <span>{Num.addCommas(calculateYearlyDividend())}</span>\n                </div> \n            </div>\n        </div>\n    );\n};","import { useState } from 'react';\nimport { ItemDiscount } from './ItemDiscount';\nimport { ItemDiscountComparsion } from './ItemDiscountComparsion';\n\nenum DiscountType {\n    ItemDiscount = 'ItemDiscount',\n    ItemDiscountComparsion  = 'ItemDiscountComparsion',\n}\n\nexport const Discount = () => {\n    const [sectionType, setSectionType] = useState<string>(DiscountType.ItemDiscount);\n\n    const showSelectedSection = () => {\n        switch (sectionType) {\n            case DiscountType.ItemDiscount:\n                return <ItemDiscount />;\n            case DiscountType.ItemDiscountComparsion:\n                return <ItemDiscountComparsion />;\n            default:\n                break;\n        }\n\n        return null;\n    };\n\n    return (\n        <div className='discount-container'>\n            <div className='radio-btn-list-container'>\n                <input type='radio' id='discountedPrice' className='radio-btn btn-primary' name='discount' \n                checked={sectionType === DiscountType.ItemDiscount} readOnly\n                onClick={() => setSectionType(DiscountType.ItemDiscount)} />\n                <label htmlFor='discountedPrice'>할인 가격</label>\n                <input type='radio' id='discountedPriceComparsion' className='radio-btn btn-primary' name='discount'\n                onClick={() => setSectionType(DiscountType.ItemDiscountComparsion)} />\n                <label htmlFor='discountedPriceComparsion'>할인 가격들 비교</label>\n            </div>\n            {showSelectedSection()}\n        </div>\n    );\n};","import { ReactElement } from 'react';\nimport { Num } from '../../core/utils';\n\ninterface Props {\n    initialAssetAmount: number;\n    numOfYear: number;\n    yearlyInvestmentAmount: number;\n    compoundAssetAmounts: number[];\n    hasYearlyInvestment: boolean;\n}\n\nexport const CompoundAssetTable = (props: Props) => {\n    const { numOfYear, initialAssetAmount, compoundAssetAmounts, yearlyInvestmentAmount } = props; \n\n    const displayCompoundAssetData = () => {\n        const tableData: ReactElement<HTMLTableCellElement>[] = [];\n        let prevAssetAmount = initialAssetAmount;\n\n        for (let i = 0; i < numOfYear; i++) {\n            const currentYear = i + 1;\n            const currentAssetAmount = compoundAssetAmounts[i];\n\n            tableData.push(\n                <tr key={i}>\n                    <td>{currentYear}</td>\n                    <td>{Num.addCommas(prevAssetAmount)}</td>\n                    { props.hasYearlyInvestment && <td>{yearlyInvestmentAmount}</td> }\n                    <td>{Num.addCommas(currentAssetAmount - prevAssetAmount - yearlyInvestmentAmount)}</td>\n                    <td>{Num.addCommas(currentAssetAmount)}</td>\n                </tr>\n            );\n\n            prevAssetAmount = currentAssetAmount;\n        }\n\n        return tableData;\n    };\n\n    return (\n        <table className='bordered primary'>\n            <thead>\n                <tr>\n                    <th>연</th>\n                    <th>현재 자산</th>\n                    { props.hasYearlyInvestment && <th>연 적립액</th> }\n                    <th>수익</th>\n                    <th>총 자산</th>\n                </tr>\n            </thead>\n            <tbody>\n                {displayCompoundAssetData()}\n            </tbody>\n        </table>\n    );\n};","import { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart } from '../../ts/interfaces';\nimport { INIT_LINE_CHART_STATE, CHART_COLOR, LINE_CHART_SETTING } from './shared';\nimport { Period } from '../../core/utils';\n\ninterface Props {\n    compoundAssetAmounts: number[];\n    numOfYear: number;\n}\n\nexport const CompoundAssetChart = (props: Props) => {\n    const [data, setData] = useState<Chart>(INIT_LINE_CHART_STATE);\n    const { numOfYear, compoundAssetAmounts } = props;\n\n    useEffect(() => {\n        setData({\n            labels: Period.getPeriodSequencesInString(numOfYear),\n            datasets: [\n                {\n                    label: '자산',\n                    borderColor: CHART_COLOR.PRIMARY,\n                    backgroundColor: CHART_COLOR.PRIMARY, \n                    data: compoundAssetAmounts,\n                },\n            ]\n        });\n\n    }, [numOfYear, compoundAssetAmounts]);\n\n    const options: any = {\n        responsive: true,\n        plugins: LINE_CHART_SETTING.plugins,\n        scales: {\n            x: {\n                title: {\n                    display: true,\n                    text: '연',\n                    font: LINE_CHART_SETTING.font,\n                },\n            },\n            y: {\n                title: {\n                    display: true,\n                    text: '금액',\n                    font: LINE_CHART_SETTING.font,\n                },\n            },\n        },\n    };\n\n    return <Line data={data} options={options} />;\n};","import { useState } from 'react';\nimport { Num, Rate } from '../../core/utils';\nimport { State } from '../../core/reactState';\nimport { CompoundAssetTable } from '../tables/CompoundAssetTable';\nimport { CompoundAssetChart } from '../charts/CompoundAssetChart';\n\ninterface Input {\n    assetAmount: number;\n    numOfYear: number;\n    yearlyYield: number;\n    yearlyInvestmentAmount: number;\n    hasMonthlyInvestment: boolean;\n}\n\nexport const CompoundAsset = () => {\n    const [input, setInput] = useState<Input>({\n        assetAmount: 0,\n        numOfYear: 0,\n        yearlyYield: 0,\n        yearlyInvestmentAmount: 0,\n        hasMonthlyInvestment: false,\n    });\n\n    const switchHasMonthlyInvestment = () => {\n        setInput(prevState => ({\n            ...prevState,\n            hasMonthlyInvestment: !input.hasMonthlyInvestment,\n        }));\n    };\n\n    const calculateYearlyCompoundAsset = () => {\n        const { assetAmount, yearlyYield, yearlyInvestmentAmount, numOfYear } = input;\n        const yearlyCompoundAssets = [];\n        const yearlyYieldInDecimal = Rate.convertRateToDecimal(yearlyYield);\n        let currentAssetAmount = assetAmount;\n\n        for (let i = 0; i < numOfYear; i++) {\n            currentAssetAmount += currentAssetAmount * yearlyYieldInDecimal;\n            yearlyCompoundAssets.push(Math.round(currentAssetAmount));\n\n            currentAssetAmount += yearlyInvestmentAmount;\n        }\n\n        return yearlyCompoundAssets;\n    };\n\n    return (\n        <div className='compounding-asset-container'>\n            <div>\n                <div className='input-group input-with-legend'>\n                    <label>자산</label>\n                    <input type='text' name='assetAmount' \n                        value={Num.addCommas(input.assetAmount)}\n                        onChange={(e) => State.changeNumWithCommasProperty(e, setInput)}/>\n                </div>\n                <div className='input-group input-with-legend'>\n                    <label>연 수익률</label>\n                    <input type='number' name='yearlyYield' \n                        value={input.yearlyYield}\n                        onChange={(e) => State.changeFloatProperty(e, setInput)}/>\n                </div>\n                <div className='input-group input-with-legend'>\n                    <label>연</label>\n                    <input type='number' name='numOfYear' \n                        value={input.numOfYear}\n                        onChange={(e) => State.changeIntProperty(e, setInput)}/>\n                </div>\n                <div className='input-group'>\n                    <label>연 추가 투자?</label>\n                    <button type='button'\n                        className={input.hasMonthlyInvestment ? 'btn-primary' : 'btn-primary outline'}\n                        onClick={() => switchHasMonthlyInvestment()}>\n                        네\n                    </button>\n                </div>\n                { input.hasMonthlyInvestment && \n                <div className='input-group input-with-legend'>\n                    <label>투자 금액</label>\n                    <input type='text' name='yearlyInvestmentAmount' \n                        value={Num.addCommas(input.yearlyInvestmentAmount)}\n                        onChange={(e) => State.changeNumWithCommasProperty(e, setInput)}\n                    />\n                </div>\n                }\n            </div>\n            <div className='result-container'>\n                <CompoundAssetChart\n                    compoundAssetAmounts={calculateYearlyCompoundAsset()} \n                    numOfYear={input.numOfYear}\n                />\n                <CompoundAssetTable\n                    compoundAssetAmounts={calculateYearlyCompoundAsset()}\n                    numOfYear={input.numOfYear}\n                    initialAssetAmount={input.assetAmount}\n                    hasYearlyInvestment={input.hasMonthlyInvestment}\n                    yearlyInvestmentAmount={input.yearlyInvestmentAmount} \n                />\n            </div>\n        </div>\n    );\n};","import { Rate } from \"../utils\";\n\nexport class Discount {\n    static getDiscountedPrice(price: number, discountRate: number) {\n        const discountPercentageInDecimal = Rate.convertRateToDecimal(discountRate);\n\n        return (1 - discountPercentageInDecimal) * price;\n    }\n}\n","import { useState } from 'react';\nimport { Num } from '../../core/utils';\nimport { State } from '../../core/reactState';\nimport { Discount as DiscountCalc } from '../../core/calculator/discount';\n\ninterface Input {\n    price: number;\n    discountPercentage: number;\n}\n\nexport const ItemDiscount = () => {\n    const INIT_INPUT_STATE = {\n        price: 0,\n        discountPercentage: 0,\n    };\n\n    const [input, setInput] = useState<Input>(INIT_INPUT_STATE);\n\n    const calculate = () => {\n        const { price, discountPercentage } = input;\n        const finalPrice = DiscountCalc.getDiscountedPrice(price, discountPercentage);\n\n        return {\n            finalPrice,\n            moneySaved: price - finalPrice,\n        };\n    };\n\n    const result = calculate();\n\n    return (\n        <div className='discounted-price-container'>\n            <div className='input-container'>\n                <div className='input-group input-with-legend'>\n                    <label>가격</label>\n                    <input type='text' name='price'\n                    value={Num.addCommas(input.price).toString()}\n                    onChange={(e) => State.changeNumWithCommasProperty(e, setInput)} />\n                </div>\n                <div className='input-group input-with-legend'>\n                    <label>할인율</label>\n                    <input type='number' name='discountPercentage'\n                    value={input.discountPercentage.toString()}\n                    onChange={(e) => State.changeFloatProperty(e, setInput)} />\n                </div>\n                <div className='btn-list-container'>\n                    <button className='btn-secondary' \n                    onClick={() => setInput(INIT_INPUT_STATE)}>초기화</button>\n                </div>\n            </div>\n            <div className='result-container'>\n                <div className='result-group'>\n                    <label>할인된 가격</label>\n                    <span>{Num.addCommas(result.finalPrice)}</span>\n                </div>\n                <div className='result-group'>\n                    <label>할인 가격</label>\n                    <span>{Num.addCommas(result.moneySaved)}</span>\n                </div>\n            </div>\n        </div>\n    );\n};","import React, { useCallback, useEffect, useState } from 'react';\nimport { Discount as DiscountCalc } from '../../core/calculator/discount';\nimport { State } from '../../core/reactState';\nimport { Num, String } from '../../core/utils';\n\ninterface Item {\n    price: number;\n    discountRate: number;\n    discountedPrice: number;\n}\n\ninterface Input {\n    items: Item[];\n    globalDiscountRate: number;\n    shouldApplyGlobalDiscountRate: boolean;\n}\n\nexport const ItemDiscountComparsion = () => {\n    const INIT_STATE = {\n        items: [],\n        globalDiscountRate: 0,\n        shouldApplyGlobalDiscountRate: false,\n    };\n\n    const INIT_ITEM = {\n        price: 0,\n        discountedPrice: 0,\n        discountRate: 0,\n    };\n\n    const [input, setInput] = useState<Input>(INIT_STATE);\n\n    const isUpdatedItemsEqualToCurrentItems = useCallback((updatedItems: Item[]) => {\n        for (let i = 0; i < updatedItems.length; i++) {\n            if (input.items[i].discountRate !== updatedItems[i].discountRate)\n                return false;\n        }\n\n        return true;\n    }, [input.items]);\n\n    useEffect(() => {\n        const updatedItems = input.items.map(item => {\n            return {\n                ...item,\n                discountRate: input.globalDiscountRate,\n                discountedPrice:  DiscountCalc.getDiscountedPrice(item.price, input.globalDiscountRate),\n            };\n        });\n\n        if (isUpdatedItemsEqualToCurrentItems(updatedItems))\n            return;\n\n        setInput(prevState => ({\n            ...prevState,\n            items: updatedItems,\n        }));\n    }, [input.globalDiscountRate, input.items, isUpdatedItemsEqualToCurrentItems]);\n\n\n    const switchShouldApplyGlobalDiscountRate = () => {\n        setInput(prevState => ({\n            ...prevState,\n            shouldApplyGlobalDiscountRate: !input.shouldApplyGlobalDiscountRate,\n        }));\n    };\n\n    const addItem = () => {\n        setInput(prevState => ({\n            ...prevState,\n            items: [...input.items, INIT_ITEM],\n        }));\n    };\n\n    const removeItem = (idx: number) => {\n        const items = input.items.filter((item, i) => {\n            if (i !== idx) return item;\n            return null;\n        });\n\n        updateInputItems(items);\n    };\n\n    const resetItems = () => {\n        setInput(prevState => ({\n            ...prevState,\n            items: Array(input.items.length).fill(INIT_ITEM),\n        }));\n    };\n\n    const updateInputItems = (items: Item[]) => {\n        setInput(prevState => ({\n            ...prevState,\n            items,\n        }));\n    };\n\n    const handleDiscountRateOnChange = (e: React.ChangeEvent<HTMLInputElement>, idx: number) => {\n        const val = Number(e.target.value);\n        const items = [...input.items];\n\n        items[idx].discountRate = val;\n        items[idx].discountedPrice = DiscountCalc.getDiscountedPrice(items[idx].price, val);\n\n        updateInputItems(items);\n    };\n\n    const handlePriceOnChange = (e: React.ChangeEvent<HTMLInputElement>, idx: number) => {\n        const val = e.target.value;\n        const items = [...input.items];\n        let valInDigit = 0;\n\n        if (val === '' || val.includes(',')) {\n            valInDigit = Number(String.removeCommas(val));\n\n            items[idx].price = valInDigit;\n            items[idx].discountedPrice = DiscountCalc.getDiscountedPrice(valInDigit, items[idx].discountRate);\n\n            updateInputItems(items);\n            return;\n        }\n\n        if (!String.isDigit(val))\n            return;\n\n        valInDigit = Number(val);\n\n        items[idx].price = valInDigit;\n        items[idx].discountedPrice = DiscountCalc.getDiscountedPrice(valInDigit, items[idx].discountRate);\n\n        updateInputItems(items);\n    };\n\n    const sortByDiscountedPriceInDescendingOrder = () => {\n        const currentItems = [...input.items];\n\n        const sortedItems = currentItems.sort((a, b) => {\n            if (a.discountedPrice < b.discountedPrice)\n                return 1;\n            return -1;\n        });\n\n        updateInputItems(sortedItems);\n    };\n\n    const populateItems = () => {\n        const items = [];\n\n        for (let i = 0; i < input.items.length; i++) {\n            const item = input.items[i];\n            items.push(\n                <div className='item-discount-container' key={i}>\n                    <div className='input-group input-with-legend'>\n                        <label>가격</label>\n                        <input type='text' name='price'\n                        value={Num.addCommas(item.price).toString()} onChange={(e) => handlePriceOnChange(e, i)} />\n                    </div>\n                    <div className='input-group input-with-legend'>\n                        <label>할인율</label>\n                        <input type='number' name='discountRate'\n                        value={item.discountRate} onChange={(e) => handleDiscountRateOnChange(e, i)} />\n                    </div>\n                    <div className='final-price-container'>\n                        <label>할인된 가격</label>\n                        <label>{item.discountedPrice}</label>\n                    </div>\n                    <button className='btn-danger' onClick={() => removeItem(i)}>삭제</button>\n                </div>\n            );\n        }\n\n        return items;\n    };\n\n    const reset =() => {\n        resetItems();\n        setInput(prevState => ({\n            ...prevState,\n            globalDiscountRate: 0,\n        }));\n    };\n \n    return (\n        <div className='item-discount-comparsion-container'>\n            <button className={input.shouldApplyGlobalDiscountRate ?\n            'btn-primary' : 'btn-primary outline'}\n            onClick={() => switchShouldApplyGlobalDiscountRate()}>\n                전체 상품에 동일 할인율 적용\n            </button>\n            { input.shouldApplyGlobalDiscountRate &&\n                <div className='input-group input-with-legend'>\n                    <label>할인율</label>\n                    <input type='number' name='globalDiscountRate' value={input.globalDiscountRate}\n                    onChange={(e) => State.changeFloatProperty(e, setInput)} />\n                </div>\n            }\n            {populateItems()}\n            <div className='btn-list-container'>\n                <button className='btn-success' onClick={() => addItem()}>상품 추가</button>\n                <button className='btn-primary' onClick={() => sortByDiscountedPriceInDescendingOrder()}>정렬</button>\n                <button className='btn-secondary' onClick={() => reset()}>초기화</button>\n            </div>\n        </div>\n    );\n};","import { Link } from 'react-router-dom';\nimport { linkButtonData } from './shared';\n\nexport const Home = () => {\n    return (\n        <div>\n            <QuickNavigationButtonList />\n        </div>\n    );\n};\n\nconst QuickNavigationButtonList = () => {\n    return (\n        <div className='home-page-btn-list-container'>\n            {linkButtonData.map((data, i) => {\n                return (\n                    <Link key={i} to={`/${data.link}`}>\n                        <button className={data.className}>{data.value}</button>\n                    </Link>\n                );\n            })}\n        </div>\n    );\n};","import './assets/sass/main.css';\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\nimport { Nav } from './components/Nav';\nimport { Deposit } from './components/depositPages/Deposit';\nimport { Loan } from './components/loanPages/Loan';\nimport { Dividend } from './components/stockPage/Dividend';\nimport { CompoundAsset } from './components/assetPages/CompoundAsset';\nimport { Discount } from './components/discountPages/Discount';\nimport { Home } from './components/Home';\n\nconst App = () => {\n  return (\n      <BrowserRouter>\n          <Nav />\n        <div className='content'>\n          <Routes>\n            <Route path='/' element={<Home />} />\n            <Route path='/deposit' element={<Deposit />} />\n            <Route path='/loan' element={<Loan />} />\n            <Route path='/dividend' element={<Dividend />} />\n            <Route path='/compound-asset' element={<CompoundAsset />} />\n            <Route path='/discount' element={<Discount />} />\n          </Routes>\n        </div>\n      </BrowserRouter>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}